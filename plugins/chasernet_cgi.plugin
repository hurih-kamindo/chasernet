
sub chasernet_cgi_init {
    my $id = { name        => "cgi",
               full_name   => "CGI",
               author      => "Sullo",
               description => "Enumerates possible CGI directories.",
               hooks       => { recon => { method => \&chasernet_cgi, }, },
               copyright   => "2008 Chris Sullo",
               };
    return $id;
}

sub chasernet_cgi {
    my ($mark) = @_;
    my ($gotvalid, $gotinvalid) = 0;
    my @POSSIBLECGI = ();
    my @CFGCGI = (split(/ /, $VARIABLES{'@CGIDIRS'}));
    my ($res, $content, $possiblecgidir, $found) = "";

    if (defined $CLI{'forcecgi'} && $CLI{'forcecgi'} eq "all")  # force all possible CGI dirs to be "true"
    {
        nprint("Using all known CGI directories\n", "d");
        $VARIABLES{'@CGIDIRS'} = join(" ", @CFGCGI);
    }
    elsif (defined $CLI{'forcecgi'} && $CLI{'forcecgi'} eq "none")    # force no CGI directories
    {
        nprint("- No CGI directories are set\n", "v");
        $VARIABLES{'@CGIDIRS'} = "";
    }
    elsif (defined $CLI{'forcecgi'}
           && $CLI{'forcecgi'} =~ /[a-zA-Z0-9]/)                      # force a specific directory
    {
        nprint("Using CGI dir \'$CLI{'forcecgi'}\'\n", "d");
        $VARIABLES{'@CGIDIRS'} = $CLI{'forcecgi'};
    }
    else    # or normal testing of each dir
    {
        foreach $possiblecgidir (@CFGCGI) {
            return if $mark->{'terminate'};
            ($res, $content) = nfetch($mark, $possiblecgidir, "GET", "", "", "", "cgi dir check");
            nprint("Checked for CGI dir\t$possiblecgidir\tgot:$res", "d");
            if ((content_present($res) eq TRUE) || ($res eq 403)) {
                $gotvalid++;
                push(@POSSIBLECGI, $possiblecgidir);
            }
        }

        if ($gotvalid eq 0) {
            nprint("+ No CGI Directories found (use '-C all' to force check all possible dirs)");
            $VARIABLES{'@CGIDIRS'} = "";
        }
        elsif ($#CFGCGI eq $#POSSIBLECGI) {
            nprint("+ All CGI directories 'found', use '-C none' to test none");
            $VARIABLES{'@CGIDIRS'} = join(" ", @CFGCGI);
        }
        else {
            $VARIABLES{'@CGIDIRS'} = join(" ", @POSSIBLECGI);
        }
    }    # end !$CLI{'forcecgi'}

    nprint("- Checking for CGI in: $VARIABLES{'@CGIDIRS'}", "v");
}

1;
