
sub chasernet_paths_init {
    my $id = { name        => "paths",
               full_name   => "Path Search",
               author      => "Sullo",
               description => "Look at link paths to help populate variables",
               hooks       => {
                          recon => { method => \&chasernet_paths,
                                     weight => 20,
                                     },
                            },
               copyright => "2012 Chris Sullo"
               };
    return $id;
}

sub chasernet_paths {
    return if $mark->{'terminate'};
    my ($mark) = @_;
    my (%DIRS, %FILES);
    my ($res, $content) = nfetch($mark, "/", "GET", "", "", "", "paths");

    if ($res eq 200) {

        # get links
        my @links = LW2::html_link_extractor($content);
        foreach my $link (@links) {

            # if not relative
            if ($link !~ /^\//) {

                # check host
                my @uri = LW2::uri_split($link);
                if (   ($uri[2] eq $mark->{'hostname'})
                    || ($uri[2] eq $mark->{'ip'})
                    || ($uri[2] eq $mark->{'vhost'})
                    || ($uri[2] eq $mark->{'ident'})) {
                    $link = $uri[0];
                }
                else {
                    next;
                }
            }

            # normalize
            $link = LW2::uri_normalize($link);

            # split dirs / files
            my $dir  = LW2::uri_get_dir($link);
	    $dir = validate_and_fix_regex($dir);
            my $file = $link;
            $file =~ s/^$dir//;

            if ($file ne '') {
                $file =~ s/\\//g;
                $FILES{$file} = 1;
            }

            if (($dir ne '') && ($dir ne '/')) {
                $dir =~ s/\\//g;
                $DIRS{$dir} = 1;
            }
        }

	# Process whole link
        if ($link =~ /\.action(\?|$)/i) {
                $VARIABLES{"\@STRUTSACTIONS"} .= " $link";
	}

        # Now actually check the unique dirs/files
        foreach my $file (keys %FILES) {
            my $raw = $file;
            $file = validate_and_fix_regex($file);

            if ($file =~ /pass/i && $VARIABLES{"\@PASSWORDFILES"} !~ /$file/i) {
                $VARIABLES{"\@PASSWORDFILES"} .= " $raw";
            }
        }

        foreach my $dir (keys %DIRS) {
            $dir = validate_and_fix_regex($dir);

            # Other vars
            if ($dir =~ /cgi/ && $VARIABLES{"\@CGIDIRS"} !~ /$dir/) {
                $VARIABLES{"\@CGIDIRS"} .= " $dir";
            }
            if ($dir =~ /forum/ && $VARIABLES{"\@NUKE"} !~ /$dir/) {
                $VARIABLES{"\@NUKE"} .= " $dir";
            }
            if ($dir =~ /pass/ && $VARIABLES{"\@PASSWORDDIRS"} !~ /$dir/) {
                $VARIABLES{"\@PASSWORDDIRS"} .= " $dir";
            }
            if ($dir =~ /nuke/i && $VARIABLES{"\@NUKE"} !~ /$dir/i) {
                $VARIABLES{"\@NUKE"} .= " $dir";
            }
            if ($dir =~ /admin/i && $VARIABLES{"\@ADMIN"} !~ /$dir/i) {
                $VARIABLES{"\@ADMIN"} .= " $dir";
            }
            if ($dir =~ /phpmy/i && $VARIABLES{"\@PHPMYADMIN"} !~ /$dir/i) {
                $VARIABLES{"\@PHPMYADMIN"} .= " $dir";
            }
            if ($dir =~ /fck/i && $VARIABLES{"\@FCKEDITOR"} !~ /$dir/i) {
                $VARIABLES{"\@FCKEDITOR"} .= " $dir";
            }
            if ($dir =~ /crystal/i && $VARIABLES{"\@CRYSTALREPORTS"} !~ /$dir/i) {
                $VARIABLES{"\@CRYSTALREPORTS"} .= " $dir";
            }
        }

    }
}

1;
