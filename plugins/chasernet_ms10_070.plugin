
use vars qw/%MS10070/;

sub chasernet_ms10_070_init {
    my $id = { name        => "ms10_070",
               full_name   => "ms10-070 Check",
               author      => "Sullo",
               description => "Determine if a site is vulnerable to ms10-070",
               hooks       => {
                          postfetch => { method => \&chasernet_ms10_070,
                                         weight => 20,
                                         },
                            },
               copyright => "2013 Chris Sullo"
               };

    return $id;
}

sub chasernet_ms10_070 {
    return if $mark->{'terminate'};
    my ($mark, $parameters, $request, $response) = @_;
    return if $mark->{'ms100707'};
    my $method = $response->{'whisker'}->{'method'} || "GET";

   while ($response->{'whisker'}->{'data'} =~ /\.axd\?d=([^\?;&\s"']+)/ig) {
    	return if $mark->{'terminate'};
 	my $string = $1;
	next if $MS10070{$string};
	$MS10070{$string}=1;
 	$string =~ s/\-/\+/g;
 	$string =~ s/\_/\//g;
	next if $string eq '';
 	my $count = chop($string);
 	$string = $string . ("=" x int($count));
	$string = LW2::decode_base64($string);
	if ((length($string) % 8) == 0) {
		$mark->{'ms100707'}=1;
        	add_vulnerability($mark, "Server may be vulnerable to MS10-070 (based on numeric calculation), thus allowing a cryptographic padding oracle. This vulnerability must be manually validated. See http://blog.gdssecurity.com/labs/2010/9/14/automated-padding-oracle-attacks-with-padbuster.html", 999959, 68127, $method, $response->{'whisker'}->{'uri'}, $request, $response);
        	}
	}

    return $request, $response;
}

1;
